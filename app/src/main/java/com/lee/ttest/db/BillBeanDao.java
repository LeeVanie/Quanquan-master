package com.lee.ttest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_BEAN".
*/
public class BillBeanDao extends AbstractDao<BillBean, Long> {

    public static final String TABLENAME = "BILL_BEAN";

    /**
     * Properties of entity BillBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Datas = new Property(1, String.class, "datas", false, "DATAS");
        public final static Property BillType = new Property(2, String.class, "billType", false, "BILL_TYPE");
        public final static Property BillShouContent = new Property(3, String.class, "billShouContent", false, "BILL_SHOU_CONTENT");
        public final static Property BillChuContent = new Property(4, String.class, "billChuContent", false, "BILL_CHU_CONTENT");
        public final static Property TotalMoney = new Property(5, float.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property BillTag = new Property(6, String.class, "billTag", false, "BILL_TAG");
    }


    public BillBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BillBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATAS\" TEXT," + // 1: datas
                "\"BILL_TYPE\" TEXT," + // 2: billType
                "\"BILL_SHOU_CONTENT\" TEXT," + // 3: billShouContent
                "\"BILL_CHU_CONTENT\" TEXT," + // 4: billChuContent
                "\"TOTAL_MONEY\" REAL NOT NULL ," + // 5: totalMoney
                "\"BILL_TAG\" TEXT);"); // 6: billTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String datas = entity.getDatas();
        if (datas != null) {
            stmt.bindString(2, datas);
        }
 
        String billType = entity.getBillType();
        if (billType != null) {
            stmt.bindString(3, billType);
        }
 
        String billShouContent = entity.getBillShouContent();
        if (billShouContent != null) {
            stmt.bindString(4, billShouContent);
        }
 
        String billChuContent = entity.getBillChuContent();
        if (billChuContent != null) {
            stmt.bindString(5, billChuContent);
        }
        stmt.bindDouble(6, entity.getTotalMoney());
 
        String billTag = entity.getBillTag();
        if (billTag != null) {
            stmt.bindString(7, billTag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String datas = entity.getDatas();
        if (datas != null) {
            stmt.bindString(2, datas);
        }
 
        String billType = entity.getBillType();
        if (billType != null) {
            stmt.bindString(3, billType);
        }
 
        String billShouContent = entity.getBillShouContent();
        if (billShouContent != null) {
            stmt.bindString(4, billShouContent);
        }
 
        String billChuContent = entity.getBillChuContent();
        if (billChuContent != null) {
            stmt.bindString(5, billChuContent);
        }
        stmt.bindDouble(6, entity.getTotalMoney());
 
        String billTag = entity.getBillTag();
        if (billTag != null) {
            stmt.bindString(7, billTag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BillBean readEntity(Cursor cursor, int offset) {
        BillBean entity = new BillBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // datas
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // billType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // billShouContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // billChuContent
            cursor.getFloat(offset + 5), // totalMoney
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // billTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDatas(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBillType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBillShouContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBillChuContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalMoney(cursor.getFloat(offset + 5));
        entity.setBillTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BillBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BillBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BillBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
